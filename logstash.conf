input {
  stdin {
    type => "ezproxylog"
    debug => true
  }
  file {
    debug => true
    discover_interval => 1
    path => [ "/ezproxy/ezproxy*.res" ]
    sincedb_path => "/opt/logstash/ezproxy/.sincedb"    
    start_position => "beginning"
    type => "ezproxylog"    
  }
}

filter {
  if [type] == "ezproxylog" {
    grok {
      pattern => "%{IP:request_client_ip} %{HOST:request_client_host} %{WORD:request_client_session} %{WORD:user_name}-%{WORD:patron_id}-%{WORD:patron_type}-%{WORD:stat_class} \[%{HTTPDATE:request_timestamp}\] %{QUOTEDSTRING:request_raw} %{NUMBER:response_http} %{NUMBER:response_bytes} \"%{URI:requested_uri}\""
    }
    date {
      # Try to set the @timestamp field from the 'request_timestamp' field (parsed above with
      # grok).
      match => [ "request_timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
     geoip {
       # Try to get GeoIP lookup using value from the 'request_client_ip' field (parsed above with
       # grok).
       source => "request_client_ip"
     }
    grok {
      # Add field requested_host to the output, matching on URIHOST from requested_uri field.
      match => [ "requested_uri", "%{URIPROTO}://(?:%{USER}(?::[^@]*)?@)?(?:%{URIHOST:requested_host})?(?:%{URIPATHPARAM})?" ]
    }
    elasticsearch {
      hosts => ["logstash_sources"]
      query => "type:espace AND aut_org_username:%{[user_name]}"
      fields => ["@timestamp", "aut_org_desc"]
      add_field => { "aut_org_desc" => "%{aut_org_desc}" }
    }
  }
}

output {
  if [type] == "ezproxylog" {
    elasticsearch {
      embedded => true
      index_type => "ezproxylog"
    }
  }
}