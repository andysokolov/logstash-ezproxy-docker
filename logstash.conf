input {
#  stdin {
#    type => "ezproxylog"
#    debug => true
#  }
  file {
    debug => true
    discover_interval => 1
    path => [ "/ezproxy/ezproxy*.res" ]
    sincedb_path => "/opt/logstash/ezproxy/.sincedb"
    start_position => "beginning"
    type => "ezproxylog"
  }
}

filter {
  grok {
    pattern => "%{IP:request_client_ip} %{HOST:request_client_host} %{WORD:request_client_session} %{WORD:user_name}-%{WORD:patron_id}-%{WORD:patron_type}-%{WORD:stat_class} \[%{HTTPDATE:request_timestamp}\] %{QUOTEDSTRING:request_raw} %{NUMBER:response_http} %{NUMBER:response_bytes} \"%{URI:requested_uri}\""
    type => "ezproxylog"
  }
  date {
    # Try to set the @timestamp field from the 'request_timestamp' field (parsed above with
    # grok).
    match => [ "request_timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    type => "ezproxylog"
  }
   geoip {
     # Try to get GeoIP lookup using value from the 'request_client_ip' field (parsed above with
     # grok).
     source => "request_client_ip"
     type => "ezproxylog"
   }
  grok {
    # Add field requested_host to the output, matching on URIHOST from requested_uri field.
    match => [ "requested_uri", "%{URIPROTO}://(?:%{USER}(?::[^@]*)?@)?(?:%{URIHOST:requested_host})?(?:%{URIPATHPARAM})?" ]
    type => "ezproxylog"
  }
  elasticsearch {
    hosts => ["logstash_sources"]
    query => "type:espace AND aut_org_username:uqckorte"
    fields => ["aut_org_username", "aut_org_desc"]
    add_tag => [ "username_matches" ]
    add_field => { "aut_org_desc" => "%{aut_org_desc}" }
  }
}

output {
  elasticsearch {
    embedded => true
    index_type => "ezproxylog"
  }
}